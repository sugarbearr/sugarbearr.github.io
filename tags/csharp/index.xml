<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csharp on Hugo Site</title>
    <link>https://sugarbearr.github.io/tags/csharp/</link>
    <description>Recent content in csharp on Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 15 Jan 2024 22:32:33 +0800</lastBuildDate>
    <atom:link href="https://sugarbearr.github.io/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rx.NET</title>
      <link>https://sugarbearr.github.io/posts/rx.net/</link>
      <pubDate>Mon, 15 Jan 2024 22:32:33 +0800</pubDate>
      <guid>https://sugarbearr.github.io/posts/rx.net/</guid>
      <description>编程范式： 编程范式分为命令式编程、声明式编程、函数式编程和响应式编程。
命令式编程： 命令式编程的主要思想是关注计算机执行的步骤，即一步一步告诉计算机先做什么再做什么。 //1. 声明变量 List&amp;lt;int&amp;gt; results = new List&amp;lt;int&amp;gt;(); //2. 循环变量 foreach(var num in Enumerable.Range(1,10)) { //3. 添加条件 if (num &amp;gt; 5) { //4. 添加处理逻辑 results.Add(num); Console.WriteLine(num); } } 声明式编程： 声明式编程是以数据结构的形式来表达程序执行的逻辑。它的主要思想是告诉计算机应该做什么，但不指定具体要怎么做。 var nums = from num in Enumerable.Range(1,10) where num &amp;gt; 5 select num 函数式编程： 主要思想是把运算过程尽量写成一系列嵌套的函数调用。 Enumerable.Range(1, 10).Where(num =&amp;gt; num &amp;gt; 5).ToList().ForEach(Console.WriteLine); 响应式编程： 响应式编程是一种面向数据流和变化传播的编程范式，旨在简化事件驱动应用的实现。响应式编程专注于如何创建依赖于变更的数据流并对变化做出响应。 IObservable&amp;lt;int&amp;gt; nums = Enumerable.Range(1, 10).ToObservable(); IDisposable subscription = nums.Where(num =&amp;gt; num &amp;gt; 5).Subscribe(Console.WriteLine); subscription.Dispose(); Rx.</description>
    </item>
  </channel>
</rss>
